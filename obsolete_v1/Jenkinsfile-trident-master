/*

This is the default Jenkins Pipeline file used to create our
full weekly build images.

*/

pipeline {
  agent { label 'Trident-Master' }
  
  //triggers {
    //pollSCM('H 20 * * 3')
  //}

  environment {
    // Set the MANIFEST we want to use for this build
    TRUEOS_MANIFEST='trident-master.json'
  }

  stages {
    stage('Prepare') {
      steps {
        checkout scm
	sh '${WORKSPACE}/build-distro.sh checkout'
      }
    }
    stage('World') {
      steps {
        sh '${WORKSPACE}/build-distro.sh world'
      }
    }
    stage('Kernel') {
      steps {
        sh '${WORKSPACE}/build-distro.sh kernel'
      }
    }
    stage('Packages') {
      environment {
	   // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('Trident-sign')
           PKG_REPO_SIGNING_KEY = credentials('Trident-sign')
      }
      steps {
        sh '${WORKSPACE}/build-distro.sh base'
      }
    }
    stage('Make ISO') {
      environment {
           // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('Trident-sign')
      }
      post {
        success {
          archiveArtifacts artifacts: 'artifact-iso/pkg.list', fingerprint: true
        }
      }
      steps {
        sh '${WORKSPACE}/build-distro.sh release'
        sh '${WORKSPACE}/build-distro.sh manifest'
        sh '${WORKSPACE}/build-distro.sh sign_artifacts'
      }
    }

    stage('Stage') {
      environment {
        REMOTE_USER='trident'
        REMOTE_SERVER='cdn1.tn.ixsystems.com'
        REMOTE_PKG_DIR='/cdn/trident/pkg/stage'
        REMOTE_ISO_DIR='/cdn/trident/iso/stage'
      }
      steps {
        sshagent (credentials: ['Trident-publish']) {
          // Packages
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_PKG_DIR}/latest || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifact-pkg-base/ ${REMOTE_USER}@${REMOTE_SERVER}:/${REMOTE_PKG_DIR}/latest/'
          // ISO Artifacts
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_ISO_DIR}/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifact-iso/ ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_ISO_DIR}'
        }
      }
    }
  }
}
